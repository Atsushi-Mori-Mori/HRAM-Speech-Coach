#　-*- coding: utf-8 -*-
import sys
import os
import re
import struct
import binascii
import numpy as np
# -------------------------------------------------------
import pandas as pd
import numpy as np
import glob
# # -------------------------------------------------------
import cv2
import numpy as np
import tensorflow as tf
import tensorflow_hub as hub

# GPUが認識されているか確認
gpus = tf.config.list_physical_devices('GPU')
if gpus:
    try:
        # メモリの制限を設定しない
        for gpu in gpus:
            tf.config.experimental.set_memory_growth(gpu, True)
        logical_gpus = tf.config.list_logical_devices('GPU')
        print(f"{len(gpus)} Physical GPUs, {len(logical_gpus)} Logical GPUs")
    except RuntimeError as e:
        print(e)
else:
    print("No GPU found")

# ### ------------------------------------------------
file01 = glob.glob('./mp4/*.mp4')

# ### ------------------------------------------------
for k in range(len(file01)):
    fname = file01[k][6:-4]
    
    # MoveNetモデルのロード
    model = hub.load('https://tfhub.dev/google/movenet/singlepose/lightning/4')
    
    # 動画の読み込み
    video_path = file01[k]  # ここにビデオファイルのパスを指定
    # video_path = '020_sandersan.mp4'  # ここにビデオファイルのパスを指定
    cap = cv2.VideoCapture(video_path)

    # CSVファイルの準備
    output_csv = './pnkp/'+fname+'_posenet_kp.csv'
    columns = ['frame'] + [f'kp_{i}_{axis}' for i in range(17) for axis in ['x', 'y', 'conf']]
    data = []

    def process_frame(frame):
        # フレームをリサイズ
        input_image = cv2.resize(frame, (192, 192))
        input_image = cv2.cvtColor(input_image, cv2.COLOR_BGR2RGB)
        input_image = tf.convert_to_tensor(input_image, dtype=tf.int32)
        input_image = tf.expand_dims(input_image, axis=0)

        # 骨格座標の推定
        outputs = model.signatures['serving_default'](input_image)
        keypoints = outputs['output_0']

        return keypoints.numpy()

    frame_count = 0

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        keypoints = process_frame(frame)
        flattened_keypoints = keypoints.flatten()

        # フレーム番号とともに結果をリストに追加
        data.append([frame_count] + flattened_keypoints.tolist())
        frame_count += 1

    cap.release()

    # データフレームを作成しCSVファイルに保存
    df = pd.DataFrame(data, columns=columns)
    df.to_csv(output_csv, index=False)

    print(f'Keypoints saved to {output_csv}')
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------

