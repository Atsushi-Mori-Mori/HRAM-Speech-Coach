#　-*- coding: utf-8 -*-
import sys
import os
import re
import struct
import binascii
import numpy as np
from math import floor, ceil
# -------------------------------------------------------
import pandas as pd
import numpy as np
import glob
# -------------------------------------------------------
import matplotlib.pyplot as plt
import cv2
import numpy as np
from pydub import AudioSegment
# # -------------------------------------------------------
# #(1)データ読込
file01 = glob.glob('./data_csv/*.csv')
conf_df = pd.read_csv('./data_csv/data/conf.csv')
# # -------------------------------------------------------
frate = 0
videotime = 10
for a in range(len(file01)):
    data0_df = pd.read_csv(file01[a], index_col=0)
    fname = file01[a][11:-4]
    print(fname)
    for m in range(len(conf_df)):
        if fname == conf_df["file"][m]:
            frate = conf_df["framerate"][m]
    if frate == 0:
        print("No framerate data")
    # # -------------------------------------------------------
    data_df = data0_df.copy()
    audio_df = data_df[['Audio','pText']]
    data_df = data_df.drop(["Audio","pText"], axis=1)
    for k in range(len(data_df)):
        for j in range(17):
            data_df.iloc[k,0+j*3] = 480 - data_df.iloc[k,0+j*3]*480
            data_df.iloc[k,1+j*3] = data_df.iloc[k,1+j*3]*640
    data_df['kp_17_x'], data_df['kp_17_y'], data_df['kp_17_conf'] = 0, 0, 0
    data_df['kp_18_x'], data_df['kp_18_y'], data_df['kp_18_conf'] = 0, 0, 0
    for k in range(len(data_df)):
        data_df.iloc[k,51] = (data_df.iloc[k,15] + data_df.iloc[k,18])/2
        data_df.iloc[k,52] = (data_df.iloc[k,16] + data_df.iloc[k,19])/2
        data_df.iloc[k,53] = min(data_df.iloc[k,17],data_df.iloc[k,20])
        data_df.iloc[k,54] = (data_df.iloc[k,33] + data_df.iloc[k,36])/2
        data_df.iloc[k,55] = (data_df.iloc[k,34] + data_df.iloc[k,37])/2
        data_df.iloc[k,56] = min(data_df.iloc[k,35],data_df.iloc[k,38])
    data_df = pd.concat([data_df,audio_df],axis=1)
    # # -------------------------------------------------------
    for k in range(len(data_df)):
        # "鼻","左右目","左右耳","左右肩","左右肘"
        for j in range(0,9,1): 
            if data_df.iloc[k,2+j*3] <= 0.2:
                data_df.iloc[k,0+j*3:2+j*3] = np.nan
        # "左右手首"
        for j in range(9,11,1):    
            if data_df.iloc[k,2+j*3] <= 0.15:
                data_df.iloc[k,0+j*3:2+j*3] = np.nan
        # "左右腰","左右膝","左右足首"
        for j in range(11,17,1):    
            # if data_df.iloc[k,2+j*3] <= 0.24:   #2024/8/24
            if data_df.iloc[k,2+j*3] <= 0.3:
            # if data_df.iloc[k,2+j*3] <= 0.35:
                data_df.iloc[k,0+j*3:2+j*3] = np.nan
        # ”左右肩”と"左右腰"の中間点
        for j in range(17,19,1):    
            if data_df.iloc[k,2+j*3] <= 0.2:
                data_df.iloc[k,0+j*3:2+j*3] = np.nan
    # # -------------------------------------------------------
    ### 左右肘座標の閾値以下となる(横向いている)場合
    ### ---------------------------------
    for k in range(len(data_df)):
        w_elbow = data_df.iloc[k,22] - data_df.iloc[k,25]
        if w_elbow < 30:
            data_df.iloc[k,22], data_df.iloc[k,25] = np.nan, np.nan
    # # -------------------------------------------------------
    # #(2) 右膝X,Y、右足首X,Y	、左膝X,Y、左足首X,Yを取得	
    kp01_df = data_df[["kp_13_x","kp_13_y","kp_14_x","kp_14_y","kp_15_x","kp_15_y","kp_16_x","kp_16_y"]]
    kp02_df = data_df[["kp_15_x","kp_15_y","kp_16_x","kp_16_y"]]
    # #(3) 上記(2)以外を残す
    kp10_df = data_df.drop(["kp_13_x","kp_13_y","kp_14_x","kp_14_y","kp_15_x","kp_15_y","kp_16_x","kp_16_y"], axis=1)
    kp11_df = data_df.drop(["kp_11_x","kp_11_y","kp_12_x","kp_12_y","kp_13_x","kp_13_y","kp_14_x","kp_14_y","kp_15_x","kp_15_y","kp_16_x","kp_16_y"], axis=1)
    ### ----------------------------------------------
    ### flg0 = 1: 上半身のみの対象のフレーム
    ### 最後のフレームまでflg0=1が継続すると(※1)tendが更新されないので、
    ### 時系列データを加工して最終フレームでkp02 == 4 and kp11 == 0:が不成立となるようにする
    ### ----------------------------------------------
    flg0, index, tstart, tend = 0, [], [], []
    stime, laptime, frame = 0, 0, frate
    # stime, laptime, frame = 0, 0, 25
    # stime, laptime, frame = 0, 0, 30
    data6_df, j = [], 0
    for n in range(len(data_df)):
        kp01 = kp01_df.iloc[n,:].isnull().sum()
        kp02 = kp02_df.iloc[n,:].isnull().sum()
        kp10 = kp10_df.iloc[n,:].isnull().sum()
        kp11 = kp11_df.iloc[n,:].isnull().sum()
        # if kp01 == 8 and kp10 == 0:
        if kp02 == 4 and kp11 == 0:
            if flg0 == 0:
                index.append(n)
                tstart.append(n/frame)
                data6_df = []
                stime = n/frame
            flg0 = 1
        else:
            if flg0 == 1:
                tend.append(n/frame)    ### (※1)
                data6_df = []
                stime = n/frame
            flg0 = 0
        if flg0 == 1:
            data6_df.append(data_df.iloc[n,:])
            laptime = n/frame - stime
            if laptime >= videotime:
            # if laptime >= 10:
                tmp6_df = pd.DataFrame(data6_df).reset_index().drop('index',axis=1)
                tmp6_df.to_csv("./data_csv/data/"+fname+str(j).zfill(2)+".csv")
                data6_df = []
                stime = n/frame
                j += 1
    time_df = pd.DataFrame(index)
    time_df["tstart"] = tstart
    for k in range(len(time_df)-len(tend)):
        tend.append(0)
    time_df["tend"] = tend
    time_df["lap"] = time_df["tend"] - time_df["tstart"]
    ### -----------------------
    time_df["6num"] = time_df["lap"]//videotime
    ### -----------------------
    sum6, j = [], 0
    for k in range(len(time_df)):
        if time_df['6num'][k] == 0:
            sum6.append(0)
        else:
            j = j + time_df['6num'][k]
            sum6.append(j)
    time_df["sum6"] = sum6
    time_df.to_excel("./data_csv/time_"+fname+".xlsx", sheet_name='time_lap')
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------

