#　-*- coding: utf-8 -*-
import sys
import os
import re
import struct
import binascii
import numpy as np
from math import floor, ceil
import shutil
import math
# -------------------------------------------------------
# 1. ライブラリーのインポート, データ読込み
# ライブラリーのインポート
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
from sklearn.model_selection import KFold
from sklearn.metrics import mean_squared_error
import glob
import lightgbm as lgb
# -------------------------------------------------------
import matplotlib.pyplot as plt
# import torch
# import cv2
# from torchvision import transforms
import numpy as np
# from pydub import AudioSegment
# # -------------------------------------------------------
# # (1)両手手首固定： Expert -> Novice
# # -------------------------------------------------------
file01 = glob.glob('../../52_hram24/24_mmds/data_org06/train/expert/*.csv')
##
# for k in range(1):
for k in range(len(file01)):
    fname = file01[k][48:-4]
    # # -------------------------------------------------------
    data01_df = pd.read_csv(file01[k], index_col=0)
    # # 骨格座標をビデオ表示する時に下記3行が必要
    # data01_df = data01_df.fillna(0)
    # data01_df = data01_df.drop(['kp_17_x','kp_17_y','kp_17_conf','kp_18_x','kp_18_y','kp_18_conf'], axis=1)
    # data01_df = data01_df.drop(columns = ['Audio','pText'])
    # # ------------------------------------------------------
    # # 左腰のnanデータに数値を埋める
    # # -------------------------------------------------------
    for j in range (len(data01_df)):
        if j == 0:
            if np.isnan(data01_df['kp_11_x'][j]):
                data01_df['kp_11_x'][j] = data01_df['kp_11_x'].mean()
            if np.isnan(data01_df['kp_11_y'][j]):
                data01_df['kp_11_y'][j] = data01_df['kp_11_y'].mean()
        else:
            if np.isnan(data01_df['kp_11_x'][j]):
                data01_df['kp_11_x'][j] = data01_df['kp_11_x'][j-1]
            if np.isnan(data01_df['kp_11_y'][j]):
                data01_df['kp_11_y'][j] = data01_df['kp_11_y'][j-1]
    # # ------------------------------------------------------
    # # 右腰のnanデータに数値を埋める
    # # -------------------------------------------------------
    for j in range (len(data01_df)):
        if j == 0:
            if np.isnan(data01_df['kp_12_x'][j]):
                data01_df['kp_12_x'][j] = data01_df['kp_12_x'].mean()
            if np.isnan(data01_df['kp_12_y'][j]):
                data01_df['kp_12_y'][j] = data01_df['kp_12_y'].mean()
        else:
            if np.isnan(data01_df['kp_12_x'][j]):
                data01_df['kp_12_x'][j] = data01_df['kp_12_x'][j-1]
            if np.isnan(data01_df['kp_12_y'][j]):
                data01_df['kp_12_y'][j] = data01_df['kp_12_y'][j-1]
    # # ------------------------------------------------------
    # # 5:左肩、6:右肩、7:左肘、8:右肘、9:左手首、10:右手首、11:左腰、12:右腰
    # # 左手首側
    data01_df['kp_7_x'] = (data01_df['kp_5_x'] + data01_df['kp_11_x']) / 2
    data01_df['kp_7_y'] = data01_df['kp_5_y'] + 20
    data01_df['kp_9_x'] = data01_df['kp_11_x'] - 20
    data01_df['kp_9_y'] = data01_df['kp_11_y'] + 20
    # #　右手首側
    data01_df['kp_8_x'] = (data01_df['kp_6_x'] + data01_df['kp_12_x']) / 2
    data01_df['kp_8_y'] = data01_df['kp_6_y'] - 20
    data01_df['kp_10_x'] = data01_df['kp_12_x'] - 20
    data01_df['kp_10_y'] = data01_df['kp_12_y'] - 20
    # # -------------------------------------------------------
    data01_df.to_csv("./data_csv/data3x/"+fname+"520.csv")
# # -------------------------------------------------------
# # (2)両手手首固定： Intermediate -> Novice
# # -------------------------------------------------------
file01 = glob.glob('../../52_hram24/24_mmds/data_org06/train/intermediate/*.csv')
##
# for k in range(1):
for k in range(len(file01)):
    fname = file01[k][54:-4]
    # # -------------------------------------------------------
    data01_df = pd.read_csv(file01[k], index_col=0)
    # # 骨格座標をビデオ表示する時に下記3行が必要
    # data01_df = data01_df.fillna(0)
    # data01_df = data01_df.drop(['kp_17_x','kp_17_y','kp_17_conf','kp_18_x','kp_18_y','kp_18_conf'], axis=1)
    # data01_df = data01_df.drop(columns = ['Audio','pText'])
    # # -------------------------------------------------------
    # # 左腰のnanデータに数値を埋める
    # # -------------------------------------------------------
    for j in range (len(data01_df)):
        if j == 0:
            if np.isnan(data01_df['kp_11_x'][j]):
                data01_df['kp_11_x'][j] = data01_df['kp_11_x'].mean()
            if np.isnan(data01_df['kp_11_y'][j]):
                data01_df['kp_11_y'][j] = data01_df['kp_11_y'].mean()
        else:
            if np.isnan(data01_df['kp_11_x'][j]):
                data01_df['kp_11_x'][j] = data01_df['kp_11_x'][j-1]
            if np.isnan(data01_df['kp_11_y'][j]):
                data01_df['kp_11_y'][j] = data01_df['kp_11_y'][j-1]
    # # ------------------------------------------------------
    # # 右腰のnanデータに数値を埋める
    # # -------------------------------------------------------
    for j in range (len(data01_df)):
        if j == 0:
            if np.isnan(data01_df['kp_12_x'][j]):
                data01_df['kp_12_x'][j] = data01_df['kp_12_x'].mean()
            if np.isnan(data01_df['kp_12_y'][j]):
                data01_df['kp_12_y'][j] = data01_df['kp_12_y'].mean()
        else:
            if np.isnan(data01_df['kp_12_x'][j]):
                data01_df['kp_12_x'][j] = data01_df['kp_12_x'][j-1]
            if np.isnan(data01_df['kp_12_y'][j]):
                data01_df['kp_12_y'][j] = data01_df['kp_12_y'][j-1]
    # # ------------------------------------------------------
    # # 5:左肩、6:右肩、7:左肘、8:右肘、9:左手首、10:右手首、11:左腰、12:右腰
    # # 左手首側
    data01_df['kp_7_x'] = (data01_df['kp_5_x'] + data01_df['kp_11_x']) / 2
    data01_df['kp_7_y'] = data01_df['kp_5_y'] + 20
    data01_df['kp_9_x'] = data01_df['kp_11_x'] - 20
    data01_df['kp_9_y'] = data01_df['kp_11_y'] + 20
    # #　右手首側
    data01_df['kp_8_x'] = (data01_df['kp_6_x'] + data01_df['kp_12_x']) / 2
    data01_df['kp_8_y'] = data01_df['kp_6_y'] - 20
    data01_df['kp_10_x'] = data01_df['kp_12_x'] - 20
    data01_df['kp_10_y'] = data01_df['kp_12_y'] - 20
    # # -------------------------------------------------------
    data01_df.to_csv("./data_csv/data3x/"+fname+"530.csv")
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------

